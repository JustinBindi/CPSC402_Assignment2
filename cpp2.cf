PDefs. Program ::= [Def] ;

DFun.      Def ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
DFunc.     Def ::= Type Id "(" [Arg] ")" ";" ;
DFInline.   Def ::= "inline" Type Id "(" [Arg] ")" "{" [Stm] "}" ;
DTInline.   Def ::= "inline" Type Id "(" [Type] ")" ";" ;
DDecl.	    Def ::= Decl ;

DUsing.    Def ::= "using" QConst ";"    ;
DTemp.      Def ::= Type Id "(" [Type] ")" ";" ;

DTypDef.   Def ::= "typedef" Type Id ";" ;
DTypDefVect. Def ::= "typedef" Type "<" [Type] ">" Id ;
DMain.      Def ::= Type "main" "(" [Arg] ")" "{" [Stm] "}" ;
DInit.      Def ::= Init ;
DStruct.    Def ::= "struct" Id "{" [Decl] "}" ";" ;



terminator Def "" ;

DDef. Decl ::= Type [Id] ";"    ;

terminator Decl "" ;


ADecl. Arg ::= Type Id ;


separator Arg "," ;

SExp. Stm ::= Exp ";" ;
SDecl.  Stm ::= Decl ";" ;
SInit.  Stm ::= Init ;
SReturn. Stm ::= "return" Exp ";"                ;
SReturnVoid. Stm ::= "return" ";" ;
SWhile.  Stm ::= "while" "(" Exp ")" Stm         ;
SBlock.  Stm ::= "{" [Stm] "}"                   ;
SIfElse. Stm ::= "if" "(" Exp ")" Stm Contd      ;
SMethod.     Stm ::= Type Id "(" [Arg] ")" "{" Stm "}" ;
SAlias.      Stm ::= "typedef" Type ;
SStruct.     Stm ::= "struct" Id "{" [Decl] "}" ";" ;


terminator Stm "" ;


DeclaSim. Decl ::= Type [Id] ;
DeclaConst. Decl ::= "const" Type Id ;

IDef.      Init ::= Type Id "=" Exp ";" ;



SDoWhi.  Stm ::= "do" Stm "while" "(" Exp ")" ";";
SFor.    Stm ::= "for" "(" Stm Exp ";" Exp ")" Stm ;


YesContd. Contd ::= "else" Stm ;
NoContd.  Contd ::= ;

STypDef. Stm ::= "typedef" Type Id ";" ;

EThrow.      Exp1  ::= "throw" Exp2 ;
ECondit.     Exp2  ::= Exp2  "?"  Exp3 ":" Exp3 ;
EPlusEq.     Exp2  ::= Exp2  "+=" Exp3         ;
EMinEq.      Exp2  ::= Exp2  "-=" Exp3         ;
EAss.        Exp2  ::= Exp2  "="  Exp3         ;
EOr.         Exp3  ::= Exp3  "||" Exp4         ;
EAnd.        Exp4  ::= Exp4  "&&" Exp5         ;
ENEq.        Exp8  ::= Exp8  "!=" Exp9         ;
EEq.         Exp8  ::= Exp8  "==" Exp9         ;
EGEq.        Exp9  ::= Exp9  ">=" Exp10        ;
ELEq.        Exp9  ::= Exp9  "<=" Exp10        ;
EGt.         Exp9  ::= Exp9  ">"  Exp10        ;
ELt.         Exp9  ::= Exp9  "<"  Exp10        ;
ERShift.     Exp10 ::= Exp10 ">>" Exp11        ;
ELShift.     Exp10 ::= Exp10 "<<" [Exp11]      ;
EMinus.      Exp11 ::= Exp11 "-"  Exp12        ;
EPlus.       Exp11 ::= Exp11 "+"  Exp12        ;
EMod.        Exp12 ::= Exp12 "%"  Exp13        ;
EDiv.        Exp12 ::= Exp12 "/"  Exp13        ;
ETimes.      Exp12 ::= Exp12 "*"  Exp13        ;
EPointer.    Exp13 ::= "*"  Exp13              ;
ENegBool.    Exp13 ::= "!"  Exp14              ;
ENegInt.     Exp13 ::= "-"  Exp13              ;
EDecr.       Exp13 ::= "--" Exp14              ;
EIncr.       Exp13 ::= "++" Exp14              ;
EAssPointer. Exp14 ::= Exp14 "->" Exp15        ;
ERefCall.    Exp14 ::= Exp14 "."  Exp15        ;
EArray.      Exp15 ::= Exp16 "["  Exp11  "]"     ;
ECall.       Exp15 ::= Exp16 "(" [Exp3] ")"     ;
EPostDecr.   Exp14 ::= Exp15 "--"              ;
EPostIncr.   Exp14 ::= Exp15 "++"              ;

EQConst.     Exp16 ::= QConst                  ;
ETrue.       Exp16 ::= "true"                  ;
EFalse.      Exp16 ::= "false"                 ;
EString.     Exp16 ::= [String]                ;
EChar.       Exp16 ::= Char                    ;
EInt.        Exp16 ::= Integer                 ;
EDouble.     Exp16 ::= Double                  ;
EPred.       Exp16 ::= Type Type               ;

internal ETyped. Exp16 ::= "(" Exp ":" Type ")" ;


coercions Exp 16 ;

separator Exp3 "," ;

separator nonempty Exp11 "" ;




TypInt.  Type ::= "int"   ;
TypChar. Type ::= "char"  ;
TypBool. Type ::= "bool"  ;
TypVoid. Type ::= "void"  ;
TypDoub. Type ::= "double";
TypQC.   Type ::= QConst  ;
TypRef. Type ::= Type "&";

token Id (letter (letter | digit | '_')*) ;


                   

separator nonempty Type   ","  ;
separator nonempty String ""   ;
separator nonempty Id     ","  ;





comment "//"      ;
comment "/*" "*/" ;
comment "#"       ;
