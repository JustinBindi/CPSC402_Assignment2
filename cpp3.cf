PDefs.   Program ::= [Def] ;

comment "#" ;
comment "//" ;
comment "/*" "*/" ;

DFun.      Def ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
DFunc.     Def ::= Type Id "(" QConst ")" ";" ;
DFunIL.    Def ::= "inline" Type Id "(" [Arg] ")" "{" [Stm] "}" ;
DFuncIL.   Def ::= "inline" Type Id "(" [Arg] ")" ";" ;

DDecl.	   Def ::= Decl ;

DMain.     Def ::= Type "main" "(" [Arg] ")" "{" [Stm] "}" ;
DInit.     Def ::= Init ;
DStruct.   Def ::= "struct" Id "{" [Decl] "}" ";" ;
DUsing.	   Def ::= "using" QConst ";" ;
DTypDef.   Def ::= "typedef" Type Id ";" ;


terminator Def "" ;

ADecl.     Arg ::= Type Id ;

separator  Arg "," ;

SExp.        Stm ::= Exp ";" ;
SDecl.       Stm ::= Decl ;
SInit.       Stm ::= Init ;
SWhile.      Stm ::= "while" "(" Exp ")" Stm ;
SFor.        Stm ::= "for" "(" Stm Exp ";" Exp ")" Stm ;
SDoWhile.    Stm ::= "do" Stm "while" "(" Exp ")" ";" ;
SBlock.      Stm ::= "{" [Stm] "}" ;
SIf.         Stm ::= "if" "(" Exp ")" Stm ;
SIfElse.     Stm ::= "if" "(" Exp ")" Stm "else" Stm ;
SMethod.     Stm ::= Type Id "(" [Arg] ")" "{" Stm "}" ;
STypDef.     Stm ::= "typedef" Type ;
SStruct.     Stm ::= "struct" Id "{" [Decl] "}" ";" ;
SReturn.     Stm ::= "return" Exp ";" ;
SReturnVoid. Stm ::= "return" ";" ;

terminator Stm "" ;

DDef.	   Decl ::= Type [Id] ";" ;

terminator Decl "" ;

IDef.    Init ::= Type Id "=" Exp ";" ;

TypRef.      Type1 ::= Type2 "&" ;
TypConst.	   Type2 ::= "const" Type3 ;
TypQC.       Type3 ::= QConst ;
TypVoid.     Type3 ::= "void" ;
TypInteger.  Type3 ::= "int" ;
TypDouble.   Type3 ::= "double" ;
TypBool.     Type3 ::= "bool" ;

separator Type "," ;
coercions Type 3 ;

QDef.      QConst ::= [Elmt] ;

NId.	   Elmt ::= Id ;
NBrac.   Elmt ::= Id "<" [Type] ">" ;

separator nonempty Elmt "::" ;

EThrow.      Exp1  ::= "throw" Exp2 ;

ECondit.     Exp2  ::= Exp2  "?"  Exp3 ":" Exp3 ;
EPlusEq.     Exp2  ::= Exp2  "+=" Exp3         ;
EMinEq.      Exp2  ::= Exp2  "-=" Exp3         ;
EAss.        Exp2  ::= Exp2  "="  Exp3         ;

EOr.         Exp3  ::= Exp3  "||" Exp4         ;

EAnd.        Exp4  ::= Exp4  "&&" Exp5         ;

ENEq.        Exp8  ::= Exp8  "!=" Exp9         ;
EEq.         Exp8  ::= Exp8  "==" Exp9         ;

EGEq.        Exp9  ::= Exp9  ">=" Exp10        ;
ELEq.        Exp9  ::= Exp9  "<=" Exp10        ;
EGt.         Exp9  ::= Exp9  ">"  Exp10        ;
ELt.         Exp9  ::= Exp9  "<"  Exp10        ;

ERShift.     Exp10 ::= Exp10 ">>" Exp11        ;
ELShift.     Exp10 ::= Exp10 "<<" [Exp11]      ;

EMinus.      Exp11 ::= Exp11 "-"  Exp12        ;
EPlus.       Exp11 ::= Exp11 "+"  Exp12        ;

EMod.        Exp12 ::= Exp12 "%"  Exp13        ;
EDiv.        Exp12 ::= Exp12 "/"  Exp13        ;
ETimes.      Exp12 ::= Exp12 "*"  Exp13        ;

ENegBool.    Exp13 ::= "!"  Exp14              ;
EDecr.       Exp13 ::= "--" Exp14              ;
EIncr.       Exp13 ::= "++" Exp14              ;

EPointer.    Exp14 ::= "*"  Exp15              ;
EPostDecr.   Exp14 ::= Exp15 "--"              ;
EPostIncr.   Exp14 ::= Exp15 "++"              ;
EAssPointer. Exp14 ::= Exp14 "->" Exp15        ;
ERefCall.    Exp14 ::= Exp14 "."  Exp15        ;

EArray.      Exp15 ::= Exp16 "["  Exp11  "]"     ;
ECall.       Exp15 ::= Exp16 "(" [Exp3] ")"     ;

EQConst.     Exp16 ::= QConst                  ;
ETrue.       Exp16 ::= "true"                  ;
EFalse.      Exp16 ::= "false"                 ;
EString.     Exp16 ::= [String]                ;
EChar.       Exp16 ::= Char                    ;
EInteger.    Exp16 ::= Integer                 ;
EDouble.     Exp16 ::= Double                  ;

internal ETyped. Exp16 ::= "(" Exp ":" Type ")" ;

coercions Exp 16 ;

separator Exp3 "," ;

separator nonempty Exp11 "" ;

separator nonempty String "" ;

token Id (letter (letter | digit | '_')*) ;

separator nonempty Id "," ;
